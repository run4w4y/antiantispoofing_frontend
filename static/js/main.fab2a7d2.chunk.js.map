{"version":3,"sources":["config.ts","components/Webcam.tsx","components/Timer.tsx","faceAPI.ts","views/WebcamPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Webcam","props","useState","webcamStream","setWebcamStream","videoInputs","setVideoInputs","activeDeviceId","setActiveDeviceId","mirrored","setMirrored","currentFrame","setCurrentFrame","currentFaceArea","setCurrentFaceArea","resultSpoofing","setResultSpoofing","setResultFaceScore","successCount","setSuccessCount","mediaRecorder","setMediaRecorder","recordedBlobs","setRecordedBlobs","setBlobsUploading","setBlobsUploaded","setBlobsUploadError","mirroredRef","useRef","selectRef","videoRef","canvasRef","hiddenCanvasRef","canvasContainerRef","useTranslation","t","updateWebcamStream","i18n","a","getTracks","forEach","track","stop","navigator","mediaDevices","getUserMedia","video","deviceId","exact","undefined","audio","getVideoInputs","enumerateDevices","allDevives","filter","x","kind","useEffect","current","srcObject","play","MediaRecorder","mimeType","blob","Blob","type","url","config","assignmentId","console","log","fetch","method","body","headers","then","resp","callback","catch","err","downloadVideo","addEventListener","e","prev","data","start","canvas","context","getContext","scaleRatio","offsetWidth","videoWidth","encodeFrame","hiddenCanvas","hcontext","h","videoHeight","width","height","drawImage","toDataURL","checked","scale","renderFrame","ratio2","strokeStyle","color","lineWidth","rect","left","top","right","bottom","stroke","drawFaceArea","submit","submitImage","imageURL","id","faceID","cameraSelected","find","cameraList","result","expiredCallback","isSuccessful","success","bbox","face_score","spoofing","timeout","setTimeout","clearTimeout","autoPlay","className","ref","muted","playsInline","success_count","onChange","target","value","map","label","children","onClick","Timer","seconds","timeLeft","setTimeLeft","Math","floor","toString","padStart","params","imageEncoded","split","JSON","stringify","image","camera_name","camera_list","task","res","json","WebcamPage","location","useLocation","seed","URLSearchParams","search","get","language","expired","setExpired","passed","setPassed","changeLanguage","btoa","atob","key","clipboard","writeText","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","i18next","init","interpolation","escapeValue","lng","resources","en","common","common_en","ru","common_ru","ReactDOM","render","StrictMode","I18nextProvider","document","getElementById"],"mappings":"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","file":"static/js/main.fab2a7d2.chunk.js","sourcesContent":["export default {\n    s3url: 'https://storage.yandexcloud.net/toloka-open/video_v2'\n} ","import React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport config from '../config';\n\ninterface WebcamProps {\n    children: JSX.Element,\n    faceID?: string | null,\n    assignmentId: string,\n    submitImage?: (params: any) => any,\n    callback?: () => void,\n    expiredCallback?: () => void\n};\n\ninterface FaceArea {\n    color: string,\n    left: number,\n    top: number,\n    right: number,\n    bottom: number\n};\n\nexport const Webcam = (props: WebcamProps) => {\n    const [webcamStream, setWebcamStream] = useState<MediaStream | null>(null);\n    const [videoInputs, setVideoInputs] = useState<Array<MediaDeviceInfo> | null>(null);\n    const [activeDeviceId, setActiveDeviceId] = useState<string | null>(null);\n    const [mirrored, setMirrored] = useState<boolean>(true);\n    const [currentFrame, setCurrentFrame] = useState<number>(0);\n    const [currentFaceArea, setCurrentFaceArea] = useState<FaceArea | null>(null);\n    const [resultSpoofing, setResultSpoofing] = useState<number | null>(null);\n    const [resultFaceScore, setResultFaceScore] = useState<number | null>(null);\n    const [successCount, setSuccessCount] = useState<number>(0);\n    const [dropTimeout, setDropTimeout] = useState<number | null>(null);\n    const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null);\n    const [recordedBlobs, setRecordedBlobs] = useState<Blob[]>([]);\n    const [blobsUploading, setBlobsUploading] = useState(false);\n    const [blobsUploaded, setBlobsUploaded] = useState(false);\n    const [blobsUploadError, setBlobsUploadError] = useState(\"\");\n    const mirroredRef = useRef<HTMLInputElement>(null);\n    const selectRef = useRef<HTMLSelectElement>(null);\n    const videoRef = useRef<HTMLVideoElement>(null);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const hiddenCanvasRef = useRef<HTMLCanvasElement>(null);\n    const canvasContainerRef = useRef<HTMLDivElement>(null);\n    const {t, i18n} = useTranslation('common');\n\n    const updateWebcamStream = async () => {\n        if (webcamStream) // stop the current stream\n            webcamStream.getTracks().forEach(track => track.stop());\n        \n        setWebcamStream(\n            await navigator\n                .mediaDevices\n                .getUserMedia({\n                    video: { deviceId: { exact: activeDeviceId ?? undefined } },\n                    audio: false\n                })\n        );\n    };\n\n    const getVideoInputs = async () => {\n        if (!videoInputs) {\n            const allDevives = \n                await navigator\n                    .mediaDevices\n                    .enumerateDevices();\n            \n            setVideoInputs(allDevives.filter(x => x.kind === 'videoinput'));\n        }\n    };\n\n    const resetDropTimeout = () => {\n        // if (dropTimeout)\n        //     clearTimeout(dropTimeout);\n\n        // console.log('drop timeout cleared');\n\n        // setDropTimeout(window.setTimeout(() => {\n        //     if (props.expiredCallback)\n        //         props.expiredCallback();\n        // }, 60000));\n\n        // console.log('drop timeout set');\n    }\n\n    const downloadVideo = () => {\n        const blob = new Blob(recordedBlobs, { type: 'video/webm' });\n\n        setBlobsUploading(true);\n        const url = `${config.s3url}/${props.assignmentId}.webm`;\n        console.log(url);\n        fetch(url, {\n            method: 'PUT',\n            body: blob,\n            headers: {\n                'Content-Type': 'video/webm'\n            }\n        })\n            .then(resp => {\n                setBlobsUploaded(true);\n                console.log('uploaded');\n                props.callback && props.callback();\n            })\n            .catch(err => {\n                setBlobsUploadError(err);\n                console.log('not uploaded');\n            });\n    };\n\n    useEffect(() => { // get the webcam stream\n        getVideoInputs();\n        resetDropTimeout();\n    }, []);\n\n    useEffect(() => {\n        updateWebcamStream();\n    }, [activeDeviceId]);\n\n    useEffect(() => { // play the webcam stream in the hidden video tag\n        videoRef.current!.srcObject = webcamStream;\n        videoRef.current?.play();\n        if (webcamStream) {\n            setMediaRecorder(new MediaRecorder(webcamStream, { mimeType: 'video/webm' }));\n        }\n    }, [webcamStream]);\n\n    useEffect(() => {\n        if (successCount >= 5)\n            downloadVideo();\n    }, [successCount]);\n\n    useEffect(() => {\n        mediaRecorder?.addEventListener('dataavailable', (e) => {\n            setRecordedBlobs(prev => [ ...prev, e.data ]);\n            console.log(e.data);\n        });\n\n        mediaRecorder?.start(1000);\n    }, [mediaRecorder]);\n\n    useEffect(() => {\n        const video = videoRef.current!;\n        const canvas = canvasRef.current!;\n        const context = canvas.getContext('2d')!;\n        const container = canvasContainerRef.current!;\n        const scaleRatio = container.offsetWidth / video.videoWidth;\n        \n        const renderFrame = () => { // render the current webcam stream frame in the canvas \n            canvas.width = video.videoWidth * scaleRatio;\n            canvas.height = video.videoHeight * scaleRatio;\n\n            if (mirroredRef.current?.checked)\n                context.scale(-1, 1);\n\n            context.drawImage(video, mirroredRef.current?.checked ? -1 * canvas.width : 0, 0, canvas.width, canvas.height);\n        };\n\n        const drawFaceArea = () => {\n            if (currentFaceArea) {\n                const ratio2 = canvas.width / 600;\n                context.strokeStyle = currentFaceArea.color;\n                context.lineWidth = 2;\n                context.rect(\n                    currentFaceArea.left * ratio2 - (mirroredRef.current?.checked ? canvas.width : 0), \n                    currentFaceArea.top * ratio2, \n                    (currentFaceArea.right - currentFaceArea.left) * ratio2, \n                    (currentFaceArea.bottom - currentFaceArea.top) * ratio2\n                );\n                context.stroke();\n            }\n        };\n\n        const encodeFrame = () => {\n            // resize and convert the frame to jpeg, then send it \n            const hiddenCanvas = hiddenCanvasRef.current!;\n            const hcontext = hiddenCanvas.getContext('2d')!;\n            const \n                ratio = video.videoHeight / video.videoWidth,\n                w = 600,\n                h = ratio * w;\n            hiddenCanvas.width = w;\n            hiddenCanvas.height = h;\n\n            hcontext.drawImage(video, 0, 0, w, h);\n            // if (mirroredRef.current?.checked)\n            //     hcontext.scale(-1, 1);\n            // hcontext.drawImage(video, mirroredRef.current?.checked ? -1 * hiddenCanvas.width : 0, 0, w, h);\n\n            const res = hiddenCanvas.toDataURL('image/jpeg', 1.0);\n            return res;\n        };\n\n        renderFrame();\n        drawFaceArea();\n        const submit = async () => {\n            const result = await props.submitImage!({\n                imageURL: encodeFrame(), \n                id: props.faceID, \n                assignmentId: props.assignmentId,\n                cameraSelected: videoInputs?.find(x => x.deviceId == activeDeviceId),\n                cameraList: videoInputs\n            });\n            if (props.expiredCallback && result.stop && result.stop === true)\n                props.expiredCallback();\n            const isSuccessful = result.success;\n            setCurrentFaceArea({\n                ...result.bbox,\n                color: isSuccessful ? 'green' : 'blue'\n            });\n            setResultFaceScore(result.face_score);\n            setResultSpoofing(result.spoofing);\n            if (isSuccessful)\n                setSuccessCount(prev => prev + 1);\n        };\n\n        if (props.submitImage && currentFrame % 15 === 0)\n            submit();\n        \n        const timeout = setTimeout(\n            () => setCurrentFrame((prev) => prev + 1)\n        , 100); // re-render in 100ms\n        return () => clearTimeout(timeout);\n\n    }, [currentFrame]);\n\n    return (\n        <div>\n            <video autoPlay={true} className=\"hidden\" ref={videoRef} muted playsInline />\n            <div className=\"grid grid-cols-2\">\n                <div ref={canvasContainerRef} className=\"col-span-2 lg:col-span-1\">\n                    <canvas ref={canvasRef} />\n                </div>\n                <div className=\"col-span-2 lg:col-span-1 w-50 p-6 bg-gray-100\">\n                    <ul>\n                        <li>\n                            <b>{t('webcam.bar.success_count.title')}</b> \n                            {t('webcam.bar.success_count.text', {success_count: successCount})}\n                        </li>\n                        <li>\n                            <b>spoofing:</b> {resultSpoofing}\n                        </li>\n                        <li>\n                            <label>\n                                <b>{t('webcam.bar.input_select.title')}</b>\n                                <br />\n                                <select ref={selectRef} onChange={(e) => setActiveDeviceId(e.target.value)}>\n                                    { videoInputs?.map(x => <option value={x.deviceId}> {x.label || `Camera ${x.deviceId}`} </option>)} \n                                </select>\n                            </label>\n                        </li>\n                        <li>\n                            <label className=\"flex items-center\">\n                                <b className=\"pr-2 flex-col\">{t('webcam.bar.mirror_toggle.title')}</b>\n                                <input className=\"flex-col\" type='checkbox' ref={mirroredRef} checked={mirrored} onChange={\n                                    (e) => {\n                                        setMirrored(e.target.checked);\n                                    }\n                                } />\n                            </label> \n                        </li>\n                        <li>\n                            {props.children}\n                        </li>\n                        <li>\n                            <button id=\"successButton\" className=\"hidden\" onClick={() => setSuccessCount(prev => prev + 1)}> Success button </button>\n                        </li> \n                    </ul>\n                </div>\n            </div>\n            \n            <canvas ref={hiddenCanvasRef} className=\"hidden\" />\n        </div>\n    );\n}","import { useState, useEffect } from 'react' \n\ninterface TimerProps {\n    callback?: () => void,\n    seconds?: number\n}\n\nexport const Timer = (props: TimerProps) => {\n    const [timeLeft, setTimeLeft] = useState(props.seconds ?? 120);\n\n    useEffect(() => {\n        if (timeLeft <= 0) {\n            if (props.callback)\n                props.callback();\n            return;\n        }\n\n        const timeout = setTimeout(\n            () => setTimeLeft((prev) => prev - 1)\n        , 1000);\n        \n        return () => clearTimeout(timeout); \n    }, [timeLeft]);\n\n    return (\n        <div>\n            <span> {Math.floor(timeLeft / 60).toString().padStart(2, \"0\")} </span>\n            :\n            <span> {Math.floor(timeLeft % 60).toString().padStart(2, \"0\")} </span>\n        </div>\n    );\n}","const API_URL = 'https://toloka.suricatvision.com:8443/predictions/biometric'\n\ninterface SubmitImageParameters {\n    imageURL: string,\n    assignmentId: string,\n    cameraSelected: MediaDeviceInfo,\n    cameraList: MediaDeviceInfo[]\n}\n\nexport const submitImage = async (params: SubmitImageParameters) => {\n    const imageEncoded = params.imageURL.split(',')[1];\n    return fetch(API_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(JSON.stringify({\n            image: imageEncoded,\n            assignmentId: params.assignmentId,\n            camera_name: {\n                deviceId: params.cameraSelected?.deviceId,\n                label: params.cameraSelected?.label\n            },\n            camera_list: params.cameraList?.map(x => {\n                return {\n                    deviceId: x.deviceId, \n                    label: x.label\n                }\n            }),\n            task: 'real'\n        }))\n    })\n        .then(res => res.json())\n        .catch((err) => {\n            // console.log(err);\n            return null;\n        });\n}\n","import React, { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { Webcam, Timer } from '../components';\nimport { submitImage } from '../faceAPI';\nimport { useTranslation } from 'react-i18next';\n\nexport function WebcamPage() {\n    const location = useLocation();\n    const seed = new URLSearchParams(location.search).get('key');\n    const language = new URLSearchParams(location.search).get('language');\n    const faceID = new URLSearchParams(location.search).get('faceid');\n    const [ expired, setExpired ] = useState(false);\n    const [ passed, setPassed ] = useState(false);\n    const { t, i18n } = useTranslation('common');\n\n    useEffect(() => {\n        i18n.changeLanguage(language ?? 'en');\n    }, []);\n\n    if (!seed)\n        return <div></div>;\n\n    if (expired)\n        return <div>{t('webcam.view.timer.expired')}</div>;\n\n    if (passed) {\n        const res = btoa(atob(seed) + '|>*<|' + 'aaaaa');\n        return <div>\n            {t('webcam.view.success.text', {key: res})} \n            <button className=\"pl-2 underline text-gray-600\" onClick={async () => {\n                await navigator.clipboard.writeText(res);\n            }}> \n                {t('webcam.view.success.copy_button')} \n            </button>\n        </div>;\n    }\n\n    return (\n        <div> \n            <Webcam assignmentId={atob(seed)} callback={() => setPassed(true)} expiredCallback={() => setExpired(true)} faceID={faceID} submitImage={submitImage}>\n                <div>\n                    <b>{t('webcam.view.timer.title')}</b> \n                    <br />\n                    <Timer seconds={900} callback={() => setExpired(true)} />\n                </div>\n            </Webcam>\n        </div>\n    );\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { WebcamPage } from './views';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/'> <WebcamPage /> </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport i18next from 'i18next';\nimport { I18nextProvider } from 'react-i18next';\nimport common_en from './translations/en/common.json';\nimport common_ru from './translations/ru/common.json';\n\ni18next.init({\n  interpolation: { escapeValue: false }, \n  lng: 'en',\n  resources: {\n    en: {\n      common: common_en\n    },\n    ru: {\n      common: common_ru\n    }\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <I18nextProvider i18n={i18next}>\n      <App />\n    </I18nextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}